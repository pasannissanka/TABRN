type Collections {
  userId: MongoID!
  workspaceId: MongoID!
  type: EnumCollectionsType
  slug: String
  isDeleted: Boolean!
  title: String!
  emoji: CollectionsEmoji
  description: String
  fields: [CollectionsFields]
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type CollectionsEmoji {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input CollectionsEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

type CollectionsFields {
  key: String!
  value: JSON!
  kind: EnumCollectionsFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input CollectionsFieldsInput {
  key: String!
  value: JSON!
  kind: EnumCollectionsFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

"""List of items with pagination."""
type CollectionsPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Collections!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

input CreateOneCollectionsInput {
  workspaceId: MongoID!
  type: EnumCollectionsType
  title: String!
  emoji: CollectionsEmojiInput
  description: String
  fields: [CollectionsFieldsInput]
}

type CreateOneCollectionsPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Collections

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input CreateOneEntriesInput {
  workspaceId: MongoID!
  collectionId: MongoID!
  title: String!
  emoji: EntriesEmojiInput
  description: String
  tags: [MongoID]
  fields: [EntriesFieldsInput]
}

type CreateOneEntriesPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Entries

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input CreateOneTagsInput {
  workspaceId: MongoID
  collectionId: MongoID
  title: String
}

type CreateOneTagsPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Tags

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input CreateOneWorkspaceInput {
  emoji: WorkspaceEmojiInput
  title: String!
  description: String
  fields: [WorkspaceFieldsInput]
}

type CreateOneWorkspacePayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Workspace

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

scalar Date

type Entries {
  userId: MongoID!
  workspaceId: MongoID!
  collectionId: MongoID!
  slug: String
  isDeleted: Boolean!
  title: String!
  emoji: EntriesEmoji
  description: String
  tags: [MongoID]
  fields: [EntriesFields]
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type EntriesEmoji {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input EntriesEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

type EntriesFields {
  key: String!
  value: JSON!
  kind: EnumEntriesFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input EntriesFieldsInput {
  key: String!
  value: JSON!
  kind: EnumEntriesFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

"""List of items with pagination."""
type EntriesPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Entries!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

enum EnumCollectionsFieldsKind {
  string
  date
  number
  link
}

enum EnumCollectionsType {
  calender
  kanban
  list
}

enum EnumEntriesFieldsKind {
  string
  date
  number
  link
}

enum EnumWorkspaceFieldsKind {
  string
  date
  number
  link
}

interface ErrorInterface {
  """Generic error message"""
  message: String
}

input FilterCountCollectionsEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input FilterCountCollectionsFieldsInput {
  key: String
  value: JSON
  kind: EnumCollectionsFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterCountCollectionsInput {
  userId: MongoID
  workspaceId: MongoID
  type: EnumCollectionsType
  slug: String
  isDeleted: Boolean
  title: String
  emoji: FilterCountCollectionsEmojiInput
  description: String
  fields: [FilterCountCollectionsFieldsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountCollectionsOperatorsInput
  OR: [FilterCountCollectionsInput!]
  AND: [FilterCountCollectionsInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountCollectionsOperatorsInput {
  _id: FilterCountCollections_idOperatorsInput
}

input FilterCountCollections_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterCountEntriesEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input FilterCountEntriesFieldsInput {
  key: String
  value: JSON
  kind: EnumEntriesFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterCountEntriesInput {
  userId: MongoID
  workspaceId: MongoID
  collectionId: MongoID
  slug: String
  isDeleted: Boolean
  title: String
  emoji: FilterCountEntriesEmojiInput
  description: String
  tags: [MongoID]
  fields: [FilterCountEntriesFieldsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountEntriesOperatorsInput
  OR: [FilterCountEntriesInput!]
  AND: [FilterCountEntriesInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountEntriesOperatorsInput {
  _id: FilterCountEntries_idOperatorsInput
}

input FilterCountEntries_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterCountTagsInput {
  userId: MongoID
  workspaceId: MongoID
  collectionId: MongoID
  title: String
  slug: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountTagsOperatorsInput
  OR: [FilterCountTagsInput!]
  AND: [FilterCountTagsInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountTagsOperatorsInput {
  _id: FilterCountTags_idOperatorsInput
}

input FilterCountTags_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterCountWorkspaceEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input FilterCountWorkspaceFieldsInput {
  key: String
  value: JSON
  kind: EnumWorkspaceFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterCountWorkspaceInput {
  userId: MongoID
  slug: String
  emoji: FilterCountWorkspaceEmojiInput
  isDeleted: Boolean
  title: String
  description: String
  fields: [FilterCountWorkspaceFieldsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountWorkspaceOperatorsInput
  OR: [FilterCountWorkspaceInput!]
  AND: [FilterCountWorkspaceInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountWorkspaceOperatorsInput {
  slug: FilterCountWorkspaceSlugOperatorsInput
  _id: FilterCountWorkspace_idOperatorsInput
}

input FilterCountWorkspaceSlugOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterCountWorkspace_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindManyCollectionsFieldsInput {
  key: String
  value: JSON
  kind: EnumCollectionsFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterFindManyCollectionsInput {
  workspaceId: MongoID
  type: EnumCollectionsType
  title: String
  description: String
  fields: [FilterFindManyCollectionsFieldsInput]
  OR: [FilterFindManyCollectionsInput!]
  AND: [FilterFindManyCollectionsInput!]
}

input FilterFindManyEntriesFieldsInput {
  key: String
  value: JSON
  kind: EnumEntriesFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterFindManyEntriesInput {
  workspaceId: MongoID
  collectionId: MongoID
  title: String
  description: String
  tags: [MongoID]
  fields: [FilterFindManyEntriesFieldsInput]
  OR: [FilterFindManyEntriesInput!]
  AND: [FilterFindManyEntriesInput!]
}

input FilterFindManyTagsInput {
  workspaceId: MongoID
  collectionId: MongoID
  title: String
  OR: [FilterFindManyTagsInput!]
  AND: [FilterFindManyTagsInput!]
}

input FilterFindManyWorkspaceFieldsInput {
  key: String
  value: JSON
  kind: EnumWorkspaceFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterFindManyWorkspaceInput {
  slug: String
  title: String
  description: String
  fields: [FilterFindManyWorkspaceFieldsInput]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyWorkspaceOperatorsInput
  OR: [FilterFindManyWorkspaceInput!]
  AND: [FilterFindManyWorkspaceInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyWorkspaceOperatorsInput {
  slug: FilterFindManyWorkspaceSlugOperatorsInput
  _id: FilterFindManyWorkspace_idOperatorsInput
}

input FilterFindManyWorkspaceSlugOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterFindManyWorkspace_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindOneWorkspaceFieldsInput {
  key: String
  value: JSON
  kind: EnumWorkspaceFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterFindOneWorkspaceInput {
  slug: String
  title: String
  description: String
  fields: [FilterFindOneWorkspaceFieldsInput]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneWorkspaceOperatorsInput
  OR: [FilterFindOneWorkspaceInput!]
  AND: [FilterFindOneWorkspaceInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneWorkspaceOperatorsInput {
  slug: FilterFindOneWorkspaceSlugOperatorsInput
  _id: FilterFindOneWorkspace_idOperatorsInput
}

input FilterFindOneWorkspaceSlugOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterFindOneWorkspace_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterUpdateOneWorkspaceFieldsInput {
  key: String
  value: JSON
  kind: EnumWorkspaceFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterUpdateOneWorkspaceInput {
  slug: String
  title: String
  description: String
  fields: [FilterUpdateOneWorkspaceFieldsInput]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneWorkspaceOperatorsInput
  OR: [FilterUpdateOneWorkspaceInput!]
  AND: [FilterUpdateOneWorkspaceInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneWorkspaceOperatorsInput {
  slug: FilterUpdateOneWorkspaceSlugOperatorsInput
  _id: FilterUpdateOneWorkspace_idOperatorsInput
}

input FilterUpdateOneWorkspaceSlugOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterUpdateOneWorkspace_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type MongoError implements ErrorInterface {
  """MongoDB error message"""
  message: String

  """MongoDB error code"""
  code: Int
}

"""
The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field.
"""
scalar MongoID

type Mutation {
  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  workspaceCreateOne(record: CreateOneWorkspaceInput!): CreateOneWorkspacePayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  workspaceUpdate(
    record: UpdateOneWorkspaceInput!

    """Filter by fields"""
    filter: FilterUpdateOneWorkspaceInput
    sort: SortUpdateOneWorkspaceInput
    skip: Int
  ): UpdateOneWorkspacePayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  collectionCreateOne(record: CreateOneCollectionsInput!): CreateOneCollectionsPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  collectionUpdateById(_id: MongoID!, record: UpdateByIdCollectionsInput!): UpdateByIdCollectionsPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  EntryCreateOne(record: CreateOneEntriesInput!): CreateOneEntriesPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  EntryUpdateById(_id: MongoID!, record: UpdateByIdEntriesInput!): UpdateByIdEntriesPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  TagCreateOne(record: CreateOneTagsInput!): CreateOneTagsPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  TagUpdateById(_id: MongoID!, record: UpdateByIdTagsInput!): UpdateByIdTagsPayload
}

type PaginationInfo {
  currentPage: Int!
  perPage: Int!
  pageCount: Int
  itemCount: Int
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type Query {
  workspaceFind(
    """Filter by fields"""
    filter: FilterFindManyWorkspaceInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyWorkspaceInput
  ): [Workspace!]!
  workspaceById(_id: MongoID!): Workspace
  workspaceOne(
    """Filter by fields"""
    filter: FilterFindOneWorkspaceInput
    skip: Int
    sort: SortFindOneWorkspaceInput
  ): Workspace
  workspacePaginate(
    """Page number for displaying"""
    page: Int
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyWorkspaceInput
    sort: SortFindManyWorkspaceInput
  ): WorkspacePagination
  workspaceCount(
    """Filter by fields"""
    filter: FilterCountWorkspaceInput
  ): Int
  collectionFind(
    """Filter by fields"""
    filter: FilterFindManyCollectionsInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyCollectionsInput
  ): [Collections!]!
  collectionById(_id: MongoID!): Collections
  collectionPaginate(
    """Page number for displaying"""
    page: Int
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyCollectionsInput
    sort: SortFindManyCollectionsInput
  ): CollectionsPagination
  collectionCount(
    """Filter by fields"""
    filter: FilterCountCollectionsInput
  ): Int
  EntryFind(
    """Filter by fields"""
    filter: FilterFindManyEntriesInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyEntriesInput
  ): [Entries!]!
  EntryById(_id: MongoID!): Entries
  EntryPaginate(
    """Page number for displaying"""
    page: Int
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyEntriesInput
    sort: SortFindManyEntriesInput
  ): EntriesPagination
  EntryCount(
    """Filter by fields"""
    filter: FilterCountEntriesInput
  ): Int
  TagFind(
    """Filter by fields"""
    filter: FilterFindManyTagsInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyTagsInput
  ): [Tags!]!
  TagById(_id: MongoID!): Tags
  TagPaginate(
    """Page number for displaying"""
    page: Int
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyTagsInput
    sort: SortFindManyTagsInput
  ): TagsPagination
  TagCount(
    """Filter by fields"""
    filter: FilterCountTagsInput
  ): Int
}

"""
The string representation of JavaScript regexp. You may provide it with flags "/^abc.*/i" or without flags like "^abc.*". More info about RegExp characters and flags: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
"""
scalar RegExpAsString

type RuntimeError implements ErrorInterface {
  """Runtime error message"""
  message: String
}

enum SortFindManyCollectionsInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyEntriesInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyTagsInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyWorkspaceInput {
  _ID_ASC
  _ID_DESC
  SLUG_ASC
  SLUG_DESC
}

enum SortFindOneWorkspaceInput {
  _ID_ASC
  _ID_DESC
  SLUG_ASC
  SLUG_DESC
}

enum SortUpdateOneWorkspaceInput {
  _ID_ASC
  _ID_DESC
  SLUG_ASC
  SLUG_DESC
}

type Tags {
  userId: MongoID!
  workspaceId: MongoID
  collectionId: MongoID
  title: String
  slug: String
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""List of items with pagination."""
type TagsPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Tags!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

input UpdateByIdCollectionsEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input UpdateByIdCollectionsFieldsInput {
  key: String
  value: JSON
  kind: EnumCollectionsFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input UpdateByIdCollectionsInput {
  workspaceId: MongoID
  type: EnumCollectionsType
  title: String
  emoji: UpdateByIdCollectionsEmojiInput
  description: String
  fields: [UpdateByIdCollectionsFieldsInput]
}

type UpdateByIdCollectionsPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Collections

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input UpdateByIdEntriesEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input UpdateByIdEntriesFieldsInput {
  key: String
  value: JSON
  kind: EnumEntriesFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input UpdateByIdEntriesInput {
  workspaceId: MongoID
  collectionId: MongoID
  title: String
  emoji: UpdateByIdEntriesEmojiInput
  description: String
  tags: [MongoID]
  fields: [UpdateByIdEntriesFieldsInput]
}

type UpdateByIdEntriesPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Entries

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input UpdateByIdTagsInput {
  workspaceId: MongoID
  collectionId: MongoID
  title: String
}

type UpdateByIdTagsPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Tags

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input UpdateOneWorkspaceEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input UpdateOneWorkspaceFieldsInput {
  key: String
  value: JSON
  kind: EnumWorkspaceFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input UpdateOneWorkspaceInput {
  emoji: UpdateOneWorkspaceEmojiInput
  title: String
  description: String
  fields: [UpdateOneWorkspaceFieldsInput]
}

type UpdateOneWorkspacePayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Workspace

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type ValidationError implements ErrorInterface {
  """Combined error message from all validators"""
  message: String

  """List of validator errors"""
  errors: [ValidatorError!]
}

type ValidatorError {
  """Validation error message"""
  message: String

  """Source of the validation error from the model path"""
  path: String

  """Field value which occurs the validation error"""
  value: JSON

  """
  Input record idx in array which occurs the validation error. This `idx` is useful for createMany operation. For singular operations it always be 0. For *Many operations `idx` represents record index in array received from user.
  """
  idx: Int!
}

type Workspace {
  userId: MongoID!
  slug: String
  emoji: WorkspaceEmoji
  isDeleted: Boolean!
  title: String!
  description: String
  fields: [WorkspaceFields]
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type WorkspaceEmoji {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input WorkspaceEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

type WorkspaceFields {
  key: String!
  value: JSON!
  kind: EnumWorkspaceFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input WorkspaceFieldsInput {
  key: String!
  value: JSON!
  kind: EnumWorkspaceFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

"""List of items with pagination."""
type WorkspacePagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Workspace!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

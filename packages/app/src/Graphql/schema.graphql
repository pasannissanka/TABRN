type Collection {
  userId: MongoID!
  workspaceId: MongoID!
  type: EnumCollectionType
  slug: String
  isDeleted: Boolean!
  title: String!
  emoji: CollectionEmoji
  description: String
  fields: [CollectionFields]
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type CollectionEmoji {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input CollectionEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

type CollectionFields {
  key: String!
  value: JSON!
  kind: EnumCollectionFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input CollectionFieldsInput {
  key: String!
  value: JSON!
  kind: EnumCollectionFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

"""List of items with pagination."""
type CollectionPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Collection!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

input CreateOneCollectionInput {
  workspaceId: MongoID!
  type: EnumCollectionType
  title: String!
  emoji: CollectionEmojiInput
  description: String
  fields: [CollectionFieldsInput]
}

type CreateOneCollectionPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Collection

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input CreateOneEntryInput {
  workspaceId: MongoID!
  collectionId: MongoID!
  title: String!
  emoji: EntryEmojiInput
  description: String
  tags: [MongoID]
  fields: [EntryFieldsInput]
}

type CreateOneEntryPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Entry

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input CreateOneTagInput {
  workspaceId: MongoID
  collectionId: MongoID
  title: String
}

type CreateOneTagPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Tag

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input CreateOneWorkspaceInput {
  emoji: WorkspaceEmojiInput
  title: String!
  description: String
  fields: [WorkspaceFieldsInput]
}

type CreateOneWorkspacePayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Workspace

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

scalar Date

type Entry {
  userId: MongoID!
  workspaceId: MongoID!
  collectionId: MongoID!
  slug: String
  isDeleted: Boolean!
  title: String!
  emoji: EntryEmoji
  description: String
  tags: [MongoID]
  fields: [EntryFields]
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type EntryEmoji {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input EntryEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

type EntryFields {
  key: String!
  value: JSON!
  kind: EnumEntryFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input EntryFieldsInput {
  key: String!
  value: JSON!
  kind: EnumEntryFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

"""List of items with pagination."""
type EntryPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Entry!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

enum EnumCollectionFieldsKind {
  string
  date
  number
  link
}

enum EnumCollectionType {
  calender
  kanban
  list
}

enum EnumEntryFieldsKind {
  string
  date
  number
  link
}

enum EnumWorkspaceFieldsKind {
  string
  date
  number
  link
}

interface ErrorInterface {
  """Generic error message"""
  message: String
}

input FilterCountCollectionEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input FilterCountCollectionFieldsInput {
  key: String
  value: JSON
  kind: EnumCollectionFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterCountCollectionInput {
  userId: MongoID
  workspaceId: MongoID
  type: EnumCollectionType
  slug: String
  isDeleted: Boolean
  title: String
  emoji: FilterCountCollectionEmojiInput
  description: String
  fields: [FilterCountCollectionFieldsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountCollectionOperatorsInput
  OR: [FilterCountCollectionInput!]
  AND: [FilterCountCollectionInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountCollectionOperatorsInput {
  _id: FilterCountCollection_idOperatorsInput
}

input FilterCountCollection_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterCountEntryEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input FilterCountEntryFieldsInput {
  key: String
  value: JSON
  kind: EnumEntryFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterCountEntryInput {
  userId: MongoID
  workspaceId: MongoID
  collectionId: MongoID
  slug: String
  isDeleted: Boolean
  title: String
  emoji: FilterCountEntryEmojiInput
  description: String
  tags: [MongoID]
  fields: [FilterCountEntryFieldsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountEntryOperatorsInput
  OR: [FilterCountEntryInput!]
  AND: [FilterCountEntryInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountEntryOperatorsInput {
  _id: FilterCountEntry_idOperatorsInput
}

input FilterCountEntry_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterCountTagInput {
  userId: MongoID
  workspaceId: MongoID
  collectionId: MongoID
  title: String
  slug: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountTagOperatorsInput
  OR: [FilterCountTagInput!]
  AND: [FilterCountTagInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountTagOperatorsInput {
  _id: FilterCountTag_idOperatorsInput
}

input FilterCountTag_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterCountWorkspaceEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input FilterCountWorkspaceFieldsInput {
  key: String
  value: JSON
  kind: EnumWorkspaceFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterCountWorkspaceInput {
  userId: MongoID
  slug: String
  emoji: FilterCountWorkspaceEmojiInput
  isDeleted: Boolean
  title: String
  description: String
  fields: [FilterCountWorkspaceFieldsInput]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountWorkspaceOperatorsInput
  OR: [FilterCountWorkspaceInput!]
  AND: [FilterCountWorkspaceInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountWorkspaceOperatorsInput {
  slug: FilterCountWorkspaceSlugOperatorsInput
  _id: FilterCountWorkspace_idOperatorsInput
}

input FilterCountWorkspaceSlugOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterCountWorkspace_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindManyCollectionFieldsInput {
  key: String
  value: JSON
  kind: EnumCollectionFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterFindManyCollectionInput {
  workspaceId: MongoID
  type: EnumCollectionType
  title: String
  description: String
  fields: [FilterFindManyCollectionFieldsInput]
  OR: [FilterFindManyCollectionInput!]
  AND: [FilterFindManyCollectionInput!]
}

input FilterFindManyEntryFieldsInput {
  key: String
  value: JSON
  kind: EnumEntryFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterFindManyEntryInput {
  workspaceId: MongoID
  collectionId: MongoID
  title: String
  description: String
  tags: [MongoID]
  fields: [FilterFindManyEntryFieldsInput]
  OR: [FilterFindManyEntryInput!]
  AND: [FilterFindManyEntryInput!]
}

input FilterFindManyTagInput {
  workspaceId: MongoID
  collectionId: MongoID
  title: String
  OR: [FilterFindManyTagInput!]
  AND: [FilterFindManyTagInput!]
}

input FilterFindManyWorkspaceFieldsInput {
  key: String
  value: JSON
  kind: EnumWorkspaceFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterFindManyWorkspaceInput {
  slug: String
  title: String
  description: String
  fields: [FilterFindManyWorkspaceFieldsInput]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyWorkspaceOperatorsInput
  OR: [FilterFindManyWorkspaceInput!]
  AND: [FilterFindManyWorkspaceInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyWorkspaceOperatorsInput {
  slug: FilterFindManyWorkspaceSlugOperatorsInput
  _id: FilterFindManyWorkspace_idOperatorsInput
}

input FilterFindManyWorkspaceSlugOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterFindManyWorkspace_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindOneWorkspaceFieldsInput {
  key: String
  value: JSON
  kind: EnumWorkspaceFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterFindOneWorkspaceInput {
  slug: String
  title: String
  description: String
  fields: [FilterFindOneWorkspaceFieldsInput]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneWorkspaceOperatorsInput
  OR: [FilterFindOneWorkspaceInput!]
  AND: [FilterFindOneWorkspaceInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneWorkspaceOperatorsInput {
  slug: FilterFindOneWorkspaceSlugOperatorsInput
  _id: FilterFindOneWorkspace_idOperatorsInput
}

input FilterFindOneWorkspaceSlugOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterFindOneWorkspace_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterUpdateOneWorkspaceFieldsInput {
  key: String
  value: JSON
  kind: EnumWorkspaceFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input FilterUpdateOneWorkspaceInput {
  slug: String
  title: String
  description: String
  fields: [FilterUpdateOneWorkspaceFieldsInput]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneWorkspaceOperatorsInput
  OR: [FilterUpdateOneWorkspaceInput!]
  AND: [FilterUpdateOneWorkspaceInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneWorkspaceOperatorsInput {
  slug: FilterUpdateOneWorkspaceSlugOperatorsInput
  _id: FilterUpdateOneWorkspace_idOperatorsInput
}

input FilterUpdateOneWorkspaceSlugOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterUpdateOneWorkspace_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type MongoError implements ErrorInterface {
  """MongoDB error message"""
  message: String

  """MongoDB error code"""
  code: Int
}

"""
The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field.
"""
scalar MongoID

type Mutation {
  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  workspaceCreateOne(record: CreateOneWorkspaceInput!): CreateOneWorkspacePayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  workspaceUpdate(
    record: UpdateOneWorkspaceInput!

    """Filter by fields"""
    filter: FilterUpdateOneWorkspaceInput
    sort: SortUpdateOneWorkspaceInput
    skip: Int
  ): UpdateOneWorkspacePayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  collectionCreateOne(record: CreateOneCollectionInput!): CreateOneCollectionPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  collectionUpdateById(_id: MongoID!, record: UpdateByIdCollectionInput!): UpdateByIdCollectionPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  EntryCreateOne(record: CreateOneEntryInput!): CreateOneEntryPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  EntryUpdateById(_id: MongoID!, record: UpdateByIdEntryInput!): UpdateByIdEntryPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  TagCreateOne(record: CreateOneTagInput!): CreateOneTagPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  TagUpdateById(_id: MongoID!, record: UpdateByIdTagInput!): UpdateByIdTagPayload
}

type PaginationInfo {
  currentPage: Int!
  perPage: Int!
  pageCount: Int
  itemCount: Int
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type Query {
  workspaceFind(
    """Filter by fields"""
    filter: FilterFindManyWorkspaceInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyWorkspaceInput
  ): [Workspace!]!
  workspaceById(_id: MongoID!): Workspace
  workspaceOne(
    """Filter by fields"""
    filter: FilterFindOneWorkspaceInput
    skip: Int
    sort: SortFindOneWorkspaceInput
  ): Workspace
  workspacePaginate(
    """Page number for displaying"""
    page: Int
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyWorkspaceInput
    sort: SortFindManyWorkspaceInput
  ): WorkspacePagination
  workspaceCount(
    """Filter by fields"""
    filter: FilterCountWorkspaceInput
  ): Int
  collectionFind(
    """Filter by fields"""
    filter: FilterFindManyCollectionInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyCollectionInput
  ): [Collection!]!
  collectionById(_id: MongoID!): Collection
  collectionPaginate(
    """Page number for displaying"""
    page: Int
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyCollectionInput
    sort: SortFindManyCollectionInput
  ): CollectionPagination
  collectionCount(
    """Filter by fields"""
    filter: FilterCountCollectionInput
  ): Int
  EntryFind(
    """Filter by fields"""
    filter: FilterFindManyEntryInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyEntryInput
  ): [Entry!]!
  EntryById(_id: MongoID!): Entry
  EntryPaginate(
    """Page number for displaying"""
    page: Int
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyEntryInput
    sort: SortFindManyEntryInput
  ): EntryPagination
  EntryCount(
    """Filter by fields"""
    filter: FilterCountEntryInput
  ): Int
  TagFind(
    """Filter by fields"""
    filter: FilterFindManyTagInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyTagInput
  ): [Tag!]!
  TagById(_id: MongoID!): Tag
  TagPaginate(
    """Page number for displaying"""
    page: Int
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyTagInput
    sort: SortFindManyTagInput
  ): TagPagination
  TagCount(
    """Filter by fields"""
    filter: FilterCountTagInput
  ): Int
}

"""
The string representation of JavaScript regexp. You may provide it with flags "/^abc.*/i" or without flags like "^abc.*". More info about RegExp characters and flags: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
"""
scalar RegExpAsString

type RuntimeError implements ErrorInterface {
  """Runtime error message"""
  message: String
}

enum SortFindManyCollectionInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyEntryInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyTagInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyWorkspaceInput {
  _ID_ASC
  _ID_DESC
  SLUG_ASC
  SLUG_DESC
}

enum SortFindOneWorkspaceInput {
  _ID_ASC
  _ID_DESC
  SLUG_ASC
  SLUG_DESC
}

enum SortUpdateOneWorkspaceInput {
  _ID_ASC
  _ID_DESC
  SLUG_ASC
  SLUG_DESC
}

type Tag {
  userId: MongoID!
  workspaceId: MongoID
  collectionId: MongoID
  title: String
  slug: String
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""List of items with pagination."""
type TagPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Tag!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

input UpdateByIdCollectionEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input UpdateByIdCollectionFieldsInput {
  key: String
  value: JSON
  kind: EnumCollectionFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input UpdateByIdCollectionInput {
  workspaceId: MongoID
  type: EnumCollectionType
  title: String
  emoji: UpdateByIdCollectionEmojiInput
  description: String
  fields: [UpdateByIdCollectionFieldsInput]
}

type UpdateByIdCollectionPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Collection

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input UpdateByIdEntryEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input UpdateByIdEntryFieldsInput {
  key: String
  value: JSON
  kind: EnumEntryFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input UpdateByIdEntryInput {
  workspaceId: MongoID
  collectionId: MongoID
  title: String
  emoji: UpdateByIdEntryEmojiInput
  description: String
  tags: [MongoID]
  fields: [UpdateByIdEntryFieldsInput]
}

type UpdateByIdEntryPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Entry

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input UpdateByIdTagInput {
  workspaceId: MongoID
  collectionId: MongoID
  title: String
}

type UpdateByIdTagPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Tag

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

input UpdateOneWorkspaceEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input UpdateOneWorkspaceFieldsInput {
  key: String
  value: JSON
  kind: EnumWorkspaceFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input UpdateOneWorkspaceInput {
  emoji: UpdateOneWorkspaceEmojiInput
  title: String
  description: String
  fields: [UpdateOneWorkspaceFieldsInput]
}

type UpdateOneWorkspacePayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Workspace

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type ValidationError implements ErrorInterface {
  """Combined error message from all validators"""
  message: String

  """List of validator errors"""
  errors: [ValidatorError!]
}

type ValidatorError {
  """Validation error message"""
  message: String

  """Source of the validation error from the model path"""
  path: String

  """Field value which occurs the validation error"""
  value: JSON

  """
  Input record idx in array which occurs the validation error. This `idx` is useful for createMany operation. For singular operations it always be 0. For *Many operations `idx` represents record index in array received from user.
  """
  idx: Int!
}

type Workspace {
  userId: MongoID!
  slug: String
  emoji: WorkspaceEmoji
  isDeleted: Boolean!
  title: String!
  description: String
  fields: [WorkspaceFields]
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type WorkspaceEmoji {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

input WorkspaceEmojiInput {
  activeSkinTone: String
  emoji: String
  names: [String]
  originalUnified: String
  unified: String
}

type WorkspaceFields {
  key: String!
  value: JSON!
  kind: EnumWorkspaceFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

input WorkspaceFieldsInput {
  key: String!
  value: JSON!
  kind: EnumWorkspaceFieldsKind
  _id: MongoID
  updatedAt: Date
  createdAt: Date
}

"""List of items with pagination."""
type WorkspacePagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Workspace!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}
